

Git commands:
------------

1. create new organization: 

organization URL:	https://github.com/LearnNgain-github


2. create new repository:

walmart-project URL:	https://github.com/LearnNgain-github/wallmart.git	--> https
			git@github.com:LearnNgain-github/wallmart.git		--> ssh
						
amazon-project URL:	https://github.com/LearnNgain-github/amazon.git		--> https
			git@github.com:LearnNgain-github/amazon.git		--> ssh
						
						
3. create new team:

walmart-devteam URL:	https://github.com/orgs/LearnNgain-github/teams/walmart-devteam 	--https


4. Add the Developers to the team:

5. Provide Repo access to the team:



*********************************************************************************************

#######Note:

- +-+without commit to any created new file at working area switched. If we switch to another branch. Then we will get error i.e that file shows at all the branches

- merge conflicts happen when we integrate/ merge the same files & same line of code between two branches	[git merge]

- how to get particular branch particular commit id folders/files only 		[git cherry-pick <commit ID>]

- how to verify the ssh configuration is working or not?			[ ssh -T git@github.com ] or [ ssh -T git@mss.ghe.com ]




***********************************************************************************************

git --version

git init

.git


Logical areas:
-------------

Untracked files				tracked files
working area	********		staging area	***********************		local repository	*********************	 remote repository			
				<git add .>					<git commit -m "commit message">		<git push <alias /github URL> master>
working area	********		staging area	***********************		local repository	*********************	 remote repository



git status

git add <./ * / filename/ directory name>


####Note:
--------
- empty directories are not allow going to add or commit.


configure username & token/password:
-----------------------------------
git config --global --list
git config --global user.name "username"
git config --global user.email "usermail"



git commit -m "<commit message>"			--> -m is "message"

git commit -m "<commit message>" <file/dir name>		--> -m is "message" commit when we have file/dir

git commit -a -m "<commit message>"				--> -a is "add" -m is "message"	--> whenever the file is modified

git remote add <alias name/walmart> <github/ssh URL>		--> mapping the remote url to local repo url

git remote add walmart https://github.com/LearnNgain-github/wallmart.git

git remote -v							--> To check that remote url is mapped to local repo or not

git remote remove <alias name>					--> to delete alias/mapped url

git push <alias / walmart/ github URL> <branch name/ master>	--> push code from local repo url to remote repo url

git push walmart https://github.com/LearnNgain-github/wallmart.git <branch name/master>



github credentials:
---------------
usename/mail:
password/access token:

github-profile >> settings >> deleveper settings >> generate user access token




git log				--> To see how many commit ID's are available

git show b87654ad345df		--> Display particular commit ID files

git log -2			--> list the latest only 2 commit ID's.

git show --pretty="" --name-only 341a7fa66	--> Display particular commit ID filename

git clean -n	--> show what are the new files we want remove at working area

git clean -f 	--> remove only newly created files at "working area"

git reset	--> get back the files/folders from "staging area --> working area"

git reset <file/dir name>	--> get back particular files/folders from "staging area --> working area"

git revert <latest commit ID>	--> git back new files/dir from "remote repository --> local repository" & delete newly add files/dir at "local repository".

git push <alias name/github url> <branch name> -f	--> push code from local repo url to remote repo url

.git ignore



###Note:
-------
Q what is HEAD in git log?
- HEAD --> master HEAD is a poinetr. It is going to point current branch and latest commit ID.

Q What information will git log command display?
- It will display Author name/ usermail ID, Timestamp, commit ID, commit message.

Q How to know, In a particular commit ID. what are all the files are commited or how many files are commited?
- git show b87654ad345df/<commit ID>

Q How to push code from one repo to another repo in remote?
- By importing the code



******Branch:*********

git branch			--> To see how many branches are there in local repo

git branch -r			--> To see how many branches in remote repo

git branch -a 			--> To see all branches

git branch <branchname>		--> create branch

git checkout <branchname>	--> switch branch

git branch -d <branchname>	--> delete the branch at local repository



###Note:
-------
- without commit to any created new file at working area. If we switched to another branch. Then we will get error.	i.e that file shows at all the branches

- merge conflicts happen when we integrate/ merge the same files & same line of code between two branches	[git merge branchname]




git diff <another branchname>	--> To see the differnces b/w the branches

git merge <branchname>		--> merge the branches

git checkout -b <branchname>	--> create branch and switch to that branch

git checkout -b <feature branch> <dev branch>	--> at present master branch, switch & create the feature branch, from dev branch. but not from master 



****** push: *******

git push <alias name> <branchname1> <branchname2>	--> push some specific branches to remote repo from local repo

git push <alias name> --all 				--> push all branches to remote repository from local repository

git branch -d <branchname>				--> delete the branch at local repository

git push <alias> :<branchname>				--> delete the branch at remote repository from local repository




******** Tag: *********

git tag					--> Display all the tags

git tag <tag name>			--> create tag

git tag -d <tag name>			--> delete the tag at local repository

git push <alias name> tag <tag name>	--> push tags to remote repository from local repository

git push <alias> --tags			--> push all the tags to remote repository from local repository


###Note:
-------
- Tags are immutable and are create at master/main during production releases.

- Tag can only delete in local repo only. But, can't delete in remote repo.



******** Stash: *********

git stash

git stash list			--> see all the stashes [List all the stashes]

git stash apply			--> To get back recent/latest one from stash

git stash apply stash@{1}	--> To get back particular one from stash

git stash drop			--> To delete stash recent/latest one

git stash drop stash@{1}	--> To delete particular one at stash

git stash pop			--> To get back recent one & delete at stash 



********* cherry_pick: *********

- how to integrate a particular branch particular commit ID folders/files to another branch. 		

git cherry-pick <commit ID>


- go to particulart branch	[ git checkout <branchname> ]
- take commit ID			[ git log ]
- come back to branch		[ git checkout <branchname> ]
- execute the cherry-pick 	[ git cherry-pick <commit ID> ]





********* Clone: **********

git clone URL	--> To get the entire work flow at initial stage of new project 

Q. How to give access to others ?
Goto particular repository 	>> setting 	>> Manage access 	>> give the password	>> Click on Invite the Team/ People	>> give Team/ UserName & [read, write, Maintain, Admin] Permissions 	>>  click OK 		                              



******** fetch & pull ***********

git pull

git fetch
	
	
remote repository
	|					|
	|	git fetch		|
	v					|
local repository		|	git pull
	|					|
	|	git merge		|	
	v					v
working area


git pull = git fetch + git merge <branchname>

git fetch <alias name> <branchname>	--> To get the code from "remote repo" to "local repo".

git merge <branchname>			--> To get the code from "local repo" to "working area"

git pull <alias name> <branchname>	--> T get the code from "remote repo to "local repo" & "wroking area".




******* SSH Keys: ***********
- To make passwordless authentication we use SSH Keys.

ssh-keygen	--> To generate SSH Keys.

~/.ssh/		--> Keys are stored in user home directory


Type of keys:
------------
id_rsa		--> Private Key

id_rsa.pub	--> Public Key



Types of encryption algorithm:
-----------------------------
rsa algorithm

dsa algorithm



dsa:
---
ssh-keygen -t dsa	--> how to generate dsa encryption algorithm using SSH Keys.	-t is "Type of encryption algorithm".

id_dsa

id_dsa.pub



********** Files at ~/.ssh: ************

ls -la ~/.ssh		--> To see the SSH Keys

~/.ssh/known_hosts	--> It saves all the host details when connecting to other systems at first time

~/.ssh/config		--> To make connection timout 
Host *
	ServerAliveInterval 30
	ServerAliveCountMax 2
	
------------------------------------------------------------------
Q What are the files available in ~/.ssh ?
- config
- id_rsa
- id_rsa.pub
- known_hosts

config --> It is used for to make connection timeout.
id_rsa		--> It is a Private Key
id_rsa.pub	--> It is a Public Key
known_hostS	--> This file contains all the hosts server details are registered whenever we connect to the server at the first time 



Q How to register the id_rsa.pub (Public Key) in remote repository?

-github profile --> settings --> SSh and GPG keys --> add at SSH Keys

---------------------------------------------------------------------

ssh -T git@github.com		--> how to verify that the SSH Keys configuration is working fine or not?

https://mss.ghe.come

ssh -T git@mss.ghe.com		--> at real time

ssh-copy-id username@hostname/IP address	--> It is used to copy SSH Keys from one Linux server to another Linux server

password

ssh username@hostname/IP address

git remote add <alias name/walmart> <github/ssh URL>		--> mapping the ssh URL

git remote remove <alias name>					--> to delete alias/mapped url




*********** Personal Access Token: ***********

- when we can use Personal Access Token		--> its for passworless


Q Where we can create these Personal Access Token?

- github-profile >> settings >> deleveper settings >> generate user access token >> create new Token
- usename/mail:
- password/access token:


Q How we can use Github API?		--> 





****** rebase *********

- what is the difference between git merge & git rebase ?

merge:

maaster- mc1 -- mc2 -- dc3 (all at one commit ID  i.e dc1 -- dc2 -- dc3)
				|
				v
				developer- dc1 -- dc2 -- dc3


rebase:

maaster- mc1 -- mc2 -- dc1 -- dc2 -- dc3
				|
				v
				developer- dc1 -- dc2 -- dc3



master> git rebase developer  

master> git merge developer






git branching strategies

git rebase

README.md file		===> helping directory about the repository

pull request		===> with pull request we can integrate/ merge the code b/w two branches

fork				===> fork the repository































